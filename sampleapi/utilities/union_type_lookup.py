# -*- coding: utf-8 -*-

"""
sampleapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from apimatic_core.types.union_types.any_of import AnyOf
from apimatic_core.types.union_types.leaf_type import LeafType
from apimatic_core.types.union_types.one_of import OneOf
from apimatic_core.types.union_types.union_type_context import UnionTypeContext as Context
from sampleapi.models.pricing import Pricing
from sampleapi.models.pricing_1 import Pricing1
from sampleapi.models.pricing_2 import Pricing2
from sampleapi.models.pricing_3 import Pricing3
from sampleapi.models.pricing_4 import Pricing4
from sampleapi.models.pricing_5 import Pricing5
from sampleapi.models.pricing_6 import Pricing6


class UnionTypeLookUp:

    """The `UnionTypeLookUp` class serves as a utility class for 
    storing and managing type combinator templates.It acts as a container for the templates 
    used in handling various data types within the application.

    """
    _templates = {
        'ItemPricing': OneOf(
            [
                LeafType(Pricing),
                LeafType(Pricing1),
                LeafType(Pricing2),
                LeafType(Pricing3),
                LeafType(Pricing4),
                LeafType(Pricing5),
                LeafType(Pricing6)
            ],
            Context.create(
               is_optional=True
            )
        ),
        'ItemsRequestPricing': AnyOf(
            [
                LeafType(Pricing),
                LeafType(Pricing1),
                LeafType(Pricing2),
                LeafType(Pricing3),
                LeafType(Pricing4),
                LeafType(Pricing5),
                LeafType(Pricing6)
            ],
            Context.create(
               is_optional=True
            )
        )
    }

    @staticmethod
    def get(name):
        return UnionTypeLookUp._templates[name]


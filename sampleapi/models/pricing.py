# -*- coding: utf-8 -*-

"""
sampleapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from sampleapi.api_helper import APIHelper


class Pricing(object):

    """Implementation of the 'Pricing' model.

    Attributes:
        price (float): The model property of type float.
        currency (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "price": 'price',
        "currency": 'currency'
    }

    _optionals = [
        'price',
        'currency',
    ]

    def __init__(self,
                 price=APIHelper.SKIP,
                 currency=APIHelper.SKIP):
        """Constructor for the Pricing class"""

        # Initialize members of the class
        if price is not APIHelper.SKIP:
            self.price = price 
        if currency is not APIHelper.SKIP:
            self.currency = currency 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        price = dictionary.get("price") if dictionary.get("price") else APIHelper.SKIP
        currency = dictionary.get("currency") if dictionary.get("currency") else APIHelper.SKIP
        # Return an object of this model
        return cls(price,
                   currency)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return True

        if not isinstance(dictionary, dict):
            return False

        return True

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'price={(self.price if hasattr(self, "price") else None)!r}, '
                f'currency={(self.currency if hasattr(self, "currency") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'price={(self.price if hasattr(self, "price") else None)!s}, '
                f'currency={(self.currency if hasattr(self, "currency") else None)!s})')

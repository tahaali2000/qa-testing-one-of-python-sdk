# -*- coding: utf-8 -*-

"""
sampleapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from sampleapi.api_helper import APIHelper


class Pricing1(object):

    """Implementation of the 'Pricing1' model.

    Attributes:
        discount (float): The model property of type float.
        valid_until (datetime): The model property of type datetime.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "discount": 'discount',
        "valid_until": 'validUntil'
    }

    _optionals = [
        'discount',
        'valid_until',
    ]

    def __init__(self,
                 discount=APIHelper.SKIP,
                 valid_until=APIHelper.SKIP):
        """Constructor for the Pricing1 class"""

        # Initialize members of the class
        if discount is not APIHelper.SKIP:
            self.discount = discount 
        if valid_until is not APIHelper.SKIP:
            self.valid_until = APIHelper.apply_datetime_converter(valid_until, APIHelper.RFC3339DateTime) if valid_until else None 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        discount = dictionary.get("discount") if dictionary.get("discount") else APIHelper.SKIP
        valid_until = APIHelper.RFC3339DateTime.from_value(dictionary.get("validUntil")).datetime if dictionary.get("validUntil") else APIHelper.SKIP
        # Return an object of this model
        return cls(discount,
                   valid_until)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return True

        if not isinstance(dictionary, dict):
            return False

        return True

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'discount={(self.discount if hasattr(self, "discount") else None)!r}, '
                f'valid_until={(self.valid_until if hasattr(self, "valid_until") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'discount={(self.discount if hasattr(self, "discount") else None)!s}, '
                f'valid_until={(self.valid_until if hasattr(self, "valid_until") else None)!s})')

# -*- coding: utf-8 -*-

"""
sampleapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from sampleapi.api_helper import APIHelper
from sampleapi.models.specifications import Specifications


class Details(object):

    """Implementation of the 'Details' model.

    Attributes:
        manufacturer (str): The model property of type str.
        warranty (str): The model property of type str.
        specifications (Specifications): The model property of type
            Specifications.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "manufacturer": 'manufacturer',
        "warranty": 'warranty',
        "specifications": 'specifications'
    }

    _optionals = [
        'manufacturer',
        'warranty',
        'specifications',
    ]

    def __init__(self,
                 manufacturer=APIHelper.SKIP,
                 warranty=APIHelper.SKIP,
                 specifications=APIHelper.SKIP):
        """Constructor for the Details class"""

        # Initialize members of the class
        if manufacturer is not APIHelper.SKIP:
            self.manufacturer = manufacturer 
        if warranty is not APIHelper.SKIP:
            self.warranty = warranty 
        if specifications is not APIHelper.SKIP:
            self.specifications = specifications 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        manufacturer = dictionary.get("manufacturer") if dictionary.get("manufacturer") else APIHelper.SKIP
        warranty = dictionary.get("warranty") if dictionary.get("warranty") else APIHelper.SKIP
        specifications = Specifications.from_dictionary(dictionary.get('specifications')) if 'specifications' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(manufacturer,
                   warranty,
                   specifications)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return True

        if not isinstance(dictionary, dict):
            return False

        return True

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'manufacturer={(self.manufacturer if hasattr(self, "manufacturer") else None)!r}, '
                f'warranty={(self.warranty if hasattr(self, "warranty") else None)!r}, '
                f'specifications={(self.specifications if hasattr(self, "specifications") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'manufacturer={(self.manufacturer if hasattr(self, "manufacturer") else None)!s}, '
                f'warranty={(self.warranty if hasattr(self, "warranty") else None)!s}, '
                f'specifications={(self.specifications if hasattr(self, "specifications") else None)!s})')

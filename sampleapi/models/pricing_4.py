# -*- coding: utf-8 -*-

"""
sampleapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from sampleapi.api_helper import APIHelper


class Pricing4(object):

    """Implementation of the 'Pricing4' model.

    Attributes:
        shipping_cost (float): The model property of type float.
        shipping_method (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "shipping_cost": 'shippingCost',
        "shipping_method": 'shippingMethod'
    }

    _optionals = [
        'shipping_cost',
        'shipping_method',
    ]

    def __init__(self,
                 shipping_cost=APIHelper.SKIP,
                 shipping_method=APIHelper.SKIP):
        """Constructor for the Pricing4 class"""

        # Initialize members of the class
        if shipping_cost is not APIHelper.SKIP:
            self.shipping_cost = shipping_cost 
        if shipping_method is not APIHelper.SKIP:
            self.shipping_method = shipping_method 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        shipping_cost = dictionary.get("shippingCost") if dictionary.get("shippingCost") else APIHelper.SKIP
        shipping_method = dictionary.get("shippingMethod") if dictionary.get("shippingMethod") else APIHelper.SKIP
        # Return an object of this model
        return cls(shipping_cost,
                   shipping_method)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return True

        if not isinstance(dictionary, dict):
            return False

        return True

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'shipping_cost={(self.shipping_cost if hasattr(self, "shipping_cost") else None)!r}, '
                f'shipping_method={(self.shipping_method if hasattr(self, "shipping_method") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'shipping_cost={(self.shipping_cost if hasattr(self, "shipping_cost") else None)!s}, '
                f'shipping_method={(self.shipping_method if hasattr(self, "shipping_method") else None)!s})')

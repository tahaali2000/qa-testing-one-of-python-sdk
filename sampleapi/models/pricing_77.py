# -*- coding: utf-8 -*-

"""
sampleapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from sampleapi.api_helper import APIHelper


class Pricing77(object):

    """Implementation of the 'Pricing77' model.

    Attributes:
        price (float): The model property of type float.
        currency (str): The model property of type str.
        discount (float): The model property of type float.
        valid_until (datetime): The model property of type datetime.
        tax (float): The model property of type float.
        tax_rate (float): The model property of type float.
        membership_fee (float): The model property of type float.
        validity_period (datetime): The model property of type datetime.
        shipping_cost (float): The model property of type float.
        shipping_method (str): The model property of type str.
        service_charge (float): The model property of type float.
        description (str): The model property of type str.
        installment (float): The model property of type float.
        payment_due (datetime): The model property of type datetime.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "price": 'price',
        "currency": 'currency',
        "discount": 'discount',
        "valid_until": 'validUntil',
        "tax": 'tax',
        "tax_rate": 'taxRate',
        "membership_fee": 'membershipFee',
        "validity_period": 'validityPeriod',
        "shipping_cost": 'shippingCost',
        "shipping_method": 'shippingMethod',
        "service_charge": 'serviceCharge',
        "description": 'description',
        "installment": 'installment',
        "payment_due": 'paymentDue'
    }

    _optionals = [
        'price',
        'currency',
        'discount',
        'valid_until',
        'tax',
        'tax_rate',
        'membership_fee',
        'validity_period',
        'shipping_cost',
        'shipping_method',
        'service_charge',
        'description',
        'installment',
        'payment_due',
    ]

    def __init__(self,
                 price=APIHelper.SKIP,
                 currency=APIHelper.SKIP,
                 discount=APIHelper.SKIP,
                 valid_until=APIHelper.SKIP,
                 tax=APIHelper.SKIP,
                 tax_rate=APIHelper.SKIP,
                 membership_fee=APIHelper.SKIP,
                 validity_period=APIHelper.SKIP,
                 shipping_cost=APIHelper.SKIP,
                 shipping_method=APIHelper.SKIP,
                 service_charge=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 installment=APIHelper.SKIP,
                 payment_due=APIHelper.SKIP):
        """Constructor for the Pricing77 class"""

        # Initialize members of the class
        if price is not APIHelper.SKIP:
            self.price = price 
        if currency is not APIHelper.SKIP:
            self.currency = currency 
        if discount is not APIHelper.SKIP:
            self.discount = discount 
        if valid_until is not APIHelper.SKIP:
            self.valid_until = APIHelper.apply_datetime_converter(valid_until, APIHelper.RFC3339DateTime) if valid_until else None 
        if tax is not APIHelper.SKIP:
            self.tax = tax 
        if tax_rate is not APIHelper.SKIP:
            self.tax_rate = tax_rate 
        if membership_fee is not APIHelper.SKIP:
            self.membership_fee = membership_fee 
        if validity_period is not APIHelper.SKIP:
            self.validity_period = APIHelper.apply_datetime_converter(validity_period, APIHelper.RFC3339DateTime) if validity_period else None 
        if shipping_cost is not APIHelper.SKIP:
            self.shipping_cost = shipping_cost 
        if shipping_method is not APIHelper.SKIP:
            self.shipping_method = shipping_method 
        if service_charge is not APIHelper.SKIP:
            self.service_charge = service_charge 
        if description is not APIHelper.SKIP:
            self.description = description 
        if installment is not APIHelper.SKIP:
            self.installment = installment 
        if payment_due is not APIHelper.SKIP:
            self.payment_due = APIHelper.apply_datetime_converter(payment_due, APIHelper.RFC3339DateTime) if payment_due else None 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        price = dictionary.get("price") if dictionary.get("price") else APIHelper.SKIP
        currency = dictionary.get("currency") if dictionary.get("currency") else APIHelper.SKIP
        discount = dictionary.get("discount") if dictionary.get("discount") else APIHelper.SKIP
        valid_until = APIHelper.RFC3339DateTime.from_value(dictionary.get("validUntil")).datetime if dictionary.get("validUntil") else APIHelper.SKIP
        tax = dictionary.get("tax") if dictionary.get("tax") else APIHelper.SKIP
        tax_rate = dictionary.get("taxRate") if dictionary.get("taxRate") else APIHelper.SKIP
        membership_fee = dictionary.get("membershipFee") if dictionary.get("membershipFee") else APIHelper.SKIP
        validity_period = APIHelper.RFC3339DateTime.from_value(dictionary.get("validityPeriod")).datetime if dictionary.get("validityPeriod") else APIHelper.SKIP
        shipping_cost = dictionary.get("shippingCost") if dictionary.get("shippingCost") else APIHelper.SKIP
        shipping_method = dictionary.get("shippingMethod") if dictionary.get("shippingMethod") else APIHelper.SKIP
        service_charge = dictionary.get("serviceCharge") if dictionary.get("serviceCharge") else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        installment = dictionary.get("installment") if dictionary.get("installment") else APIHelper.SKIP
        payment_due = APIHelper.RFC3339DateTime.from_value(dictionary.get("paymentDue")).datetime if dictionary.get("paymentDue") else APIHelper.SKIP
        # Return an object of this model
        return cls(price,
                   currency,
                   discount,
                   valid_until,
                   tax,
                   tax_rate,
                   membership_fee,
                   validity_period,
                   shipping_cost,
                   shipping_method,
                   service_charge,
                   description,
                   installment,
                   payment_due)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'price={(self.price if hasattr(self, "price") else None)!r}, '
                f'currency={(self.currency if hasattr(self, "currency") else None)!r}, '
                f'discount={(self.discount if hasattr(self, "discount") else None)!r}, '
                f'valid_until={(self.valid_until if hasattr(self, "valid_until") else None)!r}, '
                f'tax={(self.tax if hasattr(self, "tax") else None)!r}, '
                f'tax_rate={(self.tax_rate if hasattr(self, "tax_rate") else None)!r}, '
                f'membership_fee={(self.membership_fee if hasattr(self, "membership_fee") else None)!r}, '
                f'validity_period={(self.validity_period if hasattr(self, "validity_period") else None)!r}, '
                f'shipping_cost={(self.shipping_cost if hasattr(self, "shipping_cost") else None)!r}, '
                f'shipping_method={(self.shipping_method if hasattr(self, "shipping_method") else None)!r}, '
                f'service_charge={(self.service_charge if hasattr(self, "service_charge") else None)!r}, '
                f'description={(self.description if hasattr(self, "description") else None)!r}, '
                f'installment={(self.installment if hasattr(self, "installment") else None)!r}, '
                f'payment_due={(self.payment_due if hasattr(self, "payment_due") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'price={(self.price if hasattr(self, "price") else None)!s}, '
                f'currency={(self.currency if hasattr(self, "currency") else None)!s}, '
                f'discount={(self.discount if hasattr(self, "discount") else None)!s}, '
                f'valid_until={(self.valid_until if hasattr(self, "valid_until") else None)!s}, '
                f'tax={(self.tax if hasattr(self, "tax") else None)!s}, '
                f'tax_rate={(self.tax_rate if hasattr(self, "tax_rate") else None)!s}, '
                f'membership_fee={(self.membership_fee if hasattr(self, "membership_fee") else None)!s}, '
                f'validity_period={(self.validity_period if hasattr(self, "validity_period") else None)!s}, '
                f'shipping_cost={(self.shipping_cost if hasattr(self, "shipping_cost") else None)!s}, '
                f'shipping_method={(self.shipping_method if hasattr(self, "shipping_method") else None)!s}, '
                f'service_charge={(self.service_charge if hasattr(self, "service_charge") else None)!s}, '
                f'description={(self.description if hasattr(self, "description") else None)!s}, '
                f'installment={(self.installment if hasattr(self, "installment") else None)!s}, '
                f'payment_due={(self.payment_due if hasattr(self, "payment_due") else None)!s})')

# -*- coding: utf-8 -*-

"""
sampleapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from sampleapi.api_helper import APIHelper
from sampleapi.models.details import Details


class ItemsRequest(object):

    """Implementation of the 'Items Request' model.

    Attributes:
        id (int): The model property of type int.
        name (str): The model property of type str.
        value (int): The model property of type int.
        tags (List[str]): The model property of type List[str].
        metadata (Dict[str, str]): The model property of type Dict[str, str].
        details (Details): The model property of type Details.
        status (StatusEnum): The model property of type StatusEnum.
        pricing (Pricing | Pricing1 | Pricing2 | Pricing3 | Pricing4 |
            Pricing5 | Pricing6 | None): The model property of type Pricing |
            Pricing1 | Pricing2 | Pricing3 | Pricing4 | Pricing5 | Pricing6 |
            None.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "name": 'name',
        "value": 'value',
        "tags": 'tags',
        "metadata": 'metadata',
        "details": 'details',
        "status": 'status',
        "pricing": 'pricing'
    }

    _optionals = [
        'id',
        'name',
        'value',
        'tags',
        'metadata',
        'details',
        'status',
        'pricing',
    ]

    def __init__(self,
                 id=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 value=APIHelper.SKIP,
                 tags=APIHelper.SKIP,
                 metadata=APIHelper.SKIP,
                 details=APIHelper.SKIP,
                 status=APIHelper.SKIP,
                 pricing=APIHelper.SKIP):
        """Constructor for the ItemsRequest class"""

        # Initialize members of the class
        if id is not APIHelper.SKIP:
            self.id = id 
        if name is not APIHelper.SKIP:
            self.name = name 
        if value is not APIHelper.SKIP:
            self.value = value 
        if tags is not APIHelper.SKIP:
            self.tags = tags 
        if metadata is not APIHelper.SKIP:
            self.metadata = metadata 
        if details is not APIHelper.SKIP:
            self.details = details 
        if status is not APIHelper.SKIP:
            self.status = status 
        if pricing is not APIHelper.SKIP:
            self.pricing = pricing 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        from sampleapi.utilities.union_type_lookup import UnionTypeLookUp

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        value = dictionary.get("value") if dictionary.get("value") else APIHelper.SKIP
        tags = dictionary.get("tags") if dictionary.get("tags") else APIHelper.SKIP
        metadata = dictionary.get("metadata") if dictionary.get("metadata") else APIHelper.SKIP
        details = Details.from_dictionary(dictionary.get('details')) if 'details' in dictionary.keys() else APIHelper.SKIP
        status = dictionary.get("status") if dictionary.get("status") else APIHelper.SKIP
        pricing = APIHelper.deserialize_union_type(UnionTypeLookUp.get('ItemsRequestPricing'), dictionary.get('pricing'), False) if dictionary.get('pricing') is not None else APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   name,
                   value,
                   tags,
                   metadata,
                   details,
                   status,
                   pricing)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'id={(self.id if hasattr(self, "id") else None)!r}, '
                f'name={(self.name if hasattr(self, "name") else None)!r}, '
                f'value={(self.value if hasattr(self, "value") else None)!r}, '
                f'tags={(self.tags if hasattr(self, "tags") else None)!r}, '
                f'metadata={(self.metadata if hasattr(self, "metadata") else None)!r}, '
                f'details={(self.details if hasattr(self, "details") else None)!r}, '
                f'status={(self.status if hasattr(self, "status") else None)!r}, '
                f'pricing={(self.pricing if hasattr(self, "pricing") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'id={(self.id if hasattr(self, "id") else None)!s}, '
                f'name={(self.name if hasattr(self, "name") else None)!s}, '
                f'value={(self.value if hasattr(self, "value") else None)!s}, '
                f'tags={(self.tags if hasattr(self, "tags") else None)!s}, '
                f'metadata={(self.metadata if hasattr(self, "metadata") else None)!s}, '
                f'details={(self.details if hasattr(self, "details") else None)!s}, '
                f'status={(self.status if hasattr(self, "status") else None)!s}, '
                f'pricing={(self.pricing if hasattr(self, "pricing") else None)!s})')

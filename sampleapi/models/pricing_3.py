# -*- coding: utf-8 -*-

"""
sampleapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from sampleapi.api_helper import APIHelper


class Pricing3(object):

    """Implementation of the 'Pricing3' model.

    Attributes:
        membership_fee (float): The model property of type float.
        validity_period (datetime): The model property of type datetime.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "membership_fee": 'membershipFee',
        "validity_period": 'validityPeriod'
    }

    _optionals = [
        'membership_fee',
        'validity_period',
    ]

    def __init__(self,
                 membership_fee=APIHelper.SKIP,
                 validity_period=APIHelper.SKIP):
        """Constructor for the Pricing3 class"""

        # Initialize members of the class
        if membership_fee is not APIHelper.SKIP:
            self.membership_fee = membership_fee 
        if validity_period is not APIHelper.SKIP:
            self.validity_period = APIHelper.apply_datetime_converter(validity_period, APIHelper.RFC3339DateTime) if validity_period else None 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        membership_fee = dictionary.get("membershipFee") if dictionary.get("membershipFee") else APIHelper.SKIP
        validity_period = APIHelper.RFC3339DateTime.from_value(dictionary.get("validityPeriod")).datetime if dictionary.get("validityPeriod") else APIHelper.SKIP
        # Return an object of this model
        return cls(membership_fee,
                   validity_period)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return True

        if not isinstance(dictionary, dict):
            return False

        return True

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'membership_fee={(self.membership_fee if hasattr(self, "membership_fee") else None)!r}, '
                f'validity_period={(self.validity_period if hasattr(self, "validity_period") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'membership_fee={(self.membership_fee if hasattr(self, "membership_fee") else None)!s}, '
                f'validity_period={(self.validity_period if hasattr(self, "validity_period") else None)!s})')
